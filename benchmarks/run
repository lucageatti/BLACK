#!/bin/bash

# timeout time in seconds
if [ -z "$TIMEOUT" ]; then
  TIMEOUT=300 # five minutes
fi

# enable memory cap by default
if [ -z "$MCAP" ]; then
  MCAP=true
fi

# utilities
report() {
  echo $@ >&2
}

output() {
  echo $@
}

die() {
  report $1
  exit 1
}

if $MCAP; then
  mcap() {
    if [ -z "$cpu" ]; then
      cpu=1
    fi

    cgexec -g "memory:benchmark/cpu$cpu" $@
  }

  has_mcap() {
    return 0
  }
else
  mcap() {
    $@
  }
  has_mcap() {
    return 1
  }
fi

# Wrapper over time and timeout
measure() {
  # Temporary file to store the time measurement
  timefile=$(mktemp)
  # Temporary file to store the command's standard output
  outputfile=$(mktemp)
  # Temporary file to store the command's standard error
  errorfile=$(mktemp)

  # actually runs the command
  n=0 # number of runs
  elapsed=0.0 # total elapsed time

  export TIMEFORMAT=%R
  status=
  while [ $n -le 10 -a $(bc -l <<< "$elapsed>1") -ne 1 ]; do
    # The following line is the core of everything:
    # 1. Lunch the given command ($@)
    # 2. with the given timeout (\timeout $TIMEOUT)
    # 3. under the given memory limits (mcap)
    # 4. and measure its execution time (time)
    time=$(time \
      (mcap \timeout -s TERM $TIMEOUT $@ > $outputfile 2> $errorfile) 2>&1 \
    )
    ret=$?

    # intercept timeouts or out of memory conditions
    if [ $ret -eq 124 ]; then
      status=timeout
      break
    elif [ $ret -eq 137 ]; then
      status=memout
      break
    elif [ $ret -ne 0 ]; then
      status="err($ret)"
      break
    fi

    # accumulate the time and increment the counter for the average
    elapsed=$(bc -l <<< $time+$elapsed)
    n=$((n+1))
  done

  echo $status > $timefile

  if [ -z "$status" ]; then
     # Compute the average time
     avg=$(bc -l <<< $elapsed/$n)

     # Output it to the temporary file
     \printf "%.3f" $avg > $timefile
  fi

  # re-output the command's standard error
  print_errors() {
    cat $errorfile >&2
  }

  # define the call-backs for the caller
  print_time() {
    cat $timefile
  }

  print_result() {
    cat $outputfile | postprocess
  }
}

# setups the benchmark
setup() {
  # Reset locales
  export LC_ALL=C

  # Reset working directory
  cd "$(git rev-parse --show-toplevel)/benchmarks"

  # find solvers directory
  solvers_dir=$(pwd)/solvers
  solvers_arch_dir=$(pwd)/solvers-$(uname -s)-$(uname -m)

  if [ -d $solvers_arch_dir ]; then
    solvers_dir=$solvers_arch_dir
  fi

  # get list of solvers
  solvers=$(ls $solvers_dir)

  # setup PATH for solver scripts
  for solver in $solvers; do
    export PATH="$solvers_dir/$solver/bin:$PATH"
    if [[ -d "$solvers_dir/$solver/lib" ]]; then
      export LD_LIBRARY_PATH="$solvers_dir/$solver/lib:$LD_LIBRARY_PATH"
    fi
  done

  # ensure to use GNU utilities on macOS
  # (they have to be installed with Homebrew for this to work)
  # export PATH="/usr/local/opt/gnu-time/libexec/gnubin:$PATH"
  export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
  export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"

  # get list of solvers run modes
  modes=$(for s in $solvers; do
    if [ -d "scripts/$s" ]; then
      find "scripts/$s" -mindepth 1 -type d \
        | sed 's|^.*scripts/||' | sed 's|/$||'
    fi
  done)

  report "Detected solvers: "
  for mode in $modes; do
    report "- $mode"
  done
  report

  report "Timeout: $TIMEOUT seconds"
}

# setups the run of a specific solver mode on one formula
setup_run() {
  mode=$1
  formula=$2

  [ -f "formulas/$formula" ] || die "Unable to open file: formulas/$formula"

  prescript="scripts/$mode/../pre.sh"
  runscript="scripts/$mode/run.sh"
  postscript="scripts/$mode/../post.sh"

  if [ ! -x "$prescript" ]; then
    prescript=cat
  fi

  if [ ! -x "$postscript" ]; then
    postscript=cat
  fi

  do_run() {
    wrapper=$@

    if [ -z "$wrapper" ]; then
      wrapper=mcap
    fi

    # Pre-process input
    input=$(mktemp)
    $prescript "formulas/$formula" > $input

    # Run
    $wrapper $runscript $input 2>&1

    return $?
  }

  postprocess() {
    result=$($postscript)
    case $result in
      SAT|UNSAT)
        output $result
      ;;
      *)
        output "err"
    esac
  }
}

#
# User-invokable entry points start here
#

# List available solvers
list() {
  setup
}

# runs one specific solver mode on one formula
run() {
  setup &> /dev/null
  setup_run $@
  do_run | postprocess
  return ${PIPESTATUS[0]}
}

# benchmarks one specific solver mode on one formula
bench()
{
  setup &> /dev/null
  setup_run $@

  do_run measure > /dev/null
  print_errors
  print_time
  output
}

bench_formula()
{
  setup &> /dev/null

  formula=$1
  cpu=$2

  type=$(echo "$formula" | cut -d/ -f1)
  family=$(echo "$formula" | cut -d/ -f2)

  statusmsg="Benchmarking formula: $formula"
  if [ "$PARALLEL_SEQ" -a "$indexfile" ]; then
    total=$(cat $indexfile | wc -l | sed 's/ //g')
    statusmsg="Benchmarking formula $PARALLEL_SEQ/$total: $formula"
    if has_mcap; then
      statusmsg="Benchmarking formula $PARALLEL_SEQ/$total (CPU $cpu): $formula"
    fi
  fi

  report $statusmsg

  output -n $formula $type $family
  for mode in $modes; do
    report -n "- $mode..."
    setup_run $mode "$formula"
    do_run measure > /dev/null
    \printf " $(print_time) $(print_result)"
    report " done"
  done
  output
}

bench_all()
{
  [ "$1" ] || die "Please specify the output file"
  output=$1

  setup

  indexfile=formulas/index

  # Get total number of formulas
  total=$(cat $indexfile | wc -l | sed 's/ //g')

  report -e "Found $total formulas"

  if [ -f "$output" ]; then
    tempindex=$(mktemp)
    grep -F -v -f \
      <(cat $output | tail -n +2 | awk '{print $1}') $indexfile \
      > $tempindex
    indexfile=$tempindex

    total=$(cat $indexfile | wc -l | sed 's/ //g')
    report -e "Running on $total missing formulas\\n"
  fi

  report -e "Starting...\\n"

  # print header of the output table
  if [ ! -f "$output" ]; then
    {
      output -n "formula type family"
      for mode in $modes; do
        \printf " $mode $mode:result"
      done
      output
    } > $output
  fi

  export indexfile

  # heavy lifting
  cat $indexfile | parallel ./run bench_formula {} {%} >> $output
}

help() {
  cat <<HELP
BLACK benchmarking suite.

Usage: $0 <command> [args..]

Commands:
  list                            Lists all the detected solvers and modes

  run <solver/mode> <formula>     Runs \`solver\` with the given \`mode\`
                                  (e.g. nuXmv/sbmc) over the given \`formula\`.
                                  If it returns \`err\`, try the \`bench\`
                                  command (below) to see the error details.

  bench <solver/mode> <formula>   Benchmarks \`solver\` with the given \`mode\`
                                  (e.g. nuXmv/sbmc) over the given \`formula\`.

  bench_formula <formula>         Benchmarks the given \`formula\` with all
                                  solvers in all modes.

                                  The result data is written to standard output,
                                  while a progress report is written to standard
                                  error.

  bench_all <file>                Runs the full benchmark of all formulas with
                                  all solvers in all modes, writing the output
                                  data on the given \`file\`.

ENVIRONMENT VARIABLES:
  Benchmark timeout (in seconds) can be set through the \`TIMEOUT\` environment
  variables. The default is 300 seconds.

  Memory control through cgroups-v1 can be disabled setting the \`MCAP\`
  environment variable to \`false\`. It is enabled by default.

EXAMPLES:
  \$ $0 bench black/default future_only/acacia/example/demo-v1.pltl
  0.019

  \$ $0 bench_formula future_only/acacia/example/demo-v1.pltl > demo-v1.dat
  Benchmarking formula: future_only/acacia/example/demo-v1.pltl
  - black/default...done
  - nuXmv/klive...done
  - nuXmv/sbmc...done

  \$ cat demo-v1.dat
  future_only/acacia/example/demo-v1.pltl future_only acacia 0.020 SAT 0.096 SAT 0.042 SAT
HELP
}

CMD=$@

if [ -z "$CMD" ]; then
  CMD=help
fi

# Actual script starts here. Just executes whatever is found on the command line
$CMD
